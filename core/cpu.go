package core

var (
	fontset = []byte{
		0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
		0x20, 0x60, 0x20, 0x20, 0x70, // 1
		0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
		0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
		0x90, 0x90, 0xF0, 0x10, 0x10, // 4
		0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
		0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
		0xF0, 0x10, 0x20, 0x40, 0x40, // 7
		0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
		0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
		0xF0, 0x90, 0xF0, 0x90, 0x90, // A
		0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
		0xF0, 0x80, 0x80, 0x80, 0xF0, // C
		0xE0, 0x90, 0x90, 0x90, 0xE0, // D
		0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
		0xF0, 0x80, 0xF0, 0x80, 0x80, // F
	}
)

// CPU :
type CPU struct {
	V          [16]uint8
	Memory     [4096]byte
	Index      uint16
	Stack      [16]uint16
	PC         uint16
	SP         uint16
	DelayTimer uint8
	SoundTimer uint8
	Opcode
}

// Opcode :
type Opcode struct {
	Opcode, NNN     uint16
	X, Y, ID, N, NN uint8
}

func newCPU() CPU {
	c := CPU{
		PC:     0x200,
		V:      [16]uint8{},
		Memory: [4096]byte{},
		Stack:  [16]uint16{},
	}
	copy(c.Memory[0:79], fontset)
	return c
}

func (c *CPU) fetchOpcode() {
	opcode := uint16(c.Memory[c.PC])<<8 | uint16(c.Memory[c.PC+1])
	c.Opcode = Opcode{
		Opcode: opcode,
		ID:     uint8(opcode & 0xF000 >> 12),
		X:      uint8(opcode & 0x0F00 >> 8),
		Y:      uint8(opcode & 0x00F0 >> 4),
		N:      uint8(opcode & 0x000F),
		NN:     uint8(opcode & 0x00FF),
		NNN:    opcode & 0x0FFF,
	}
}

func (c *CPU) copyROM(r []byte) {
	copy(c.Memory[0x200:], r)
}
